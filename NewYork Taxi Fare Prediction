{"nbformat":4,"nbformat_minor":0,"metadata":{"hide_input":false,"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"colab":{"name":"NewYork Taxi Fare Prediction","provenance":[],"collapsed_sections":["zX3F9LA7PKrT"]}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"amEZZn7dVgSG","executionInfo":{"status":"ok","timestamp":1623390920462,"user_tz":300,"elapsed":118,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"2ef58ddc-b5e7-4815-d7bd-8580877468d9"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nlf0o5GsPKrK"},"source":["import pandas as pd\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pgRidY4gPKrM"},"source":["df_train=pd.read_csv('/content/drive/MyDrive/ml/train.csv')\n","#df_train=df.sample(n=200000)### Reducing the data size from 55423856 to 200000 for faster calculations\n","df_test=pd.read_csv('/content/drive/MyDrive/ml/test.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6T3zJn8qPKrN","executionInfo":{"status":"ok","timestamp":1623390921071,"user_tz":300,"elapsed":11,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"bc29df81-ed00-4a44-9bde-c73d84aa5a27"},"source":["df_train.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(120000, 8)"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"markdown","metadata":{"id":"ZrF894q3QjCq"},"source":["# New Section"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uEnr3jNPPKrN","executionInfo":{"status":"ok","timestamp":1623390921071,"user_tz":300,"elapsed":8,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"433ac07a-4097-473f-d0ad-6039fa7baf54"},"source":["df_test.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(9914, 7)"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HjT0Ihi8PKrO","executionInfo":{"status":"ok","timestamp":1623390921072,"user_tz":300,"elapsed":6,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"c736fe15-29bf-4adb-ec24-d0dc987d1108"},"source":["df_train.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 120000 entries, 0 to 119999\n","Data columns (total 8 columns):\n"," #   Column             Non-Null Count   Dtype  \n","---  ------             --------------   -----  \n"," 0   pickup_datetime    120000 non-null  object \n"," 1   fare_amount        120000 non-null  float64\n"," 2   fare_class         120000 non-null  int64  \n"," 3   pickup_longitude   120000 non-null  float64\n"," 4   pickup_latitude    120000 non-null  float64\n"," 5   dropoff_longitude  120000 non-null  float64\n"," 6   dropoff_latitude   120000 non-null  float64\n"," 7   passenger_count    120000 non-null  int64  \n","dtypes: float64(5), int64(2), object(1)\n","memory usage: 7.3+ MB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":308},"id":"IWV5qsW7PKrO","executionInfo":{"status":"ok","timestamp":1623390921212,"user_tz":300,"elapsed":144,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"23643243-e817-40e3-b260-faf8e4705ac7"},"source":["df_train.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pickup_datetime</th>\n","      <th>fare_amount</th>\n","      <th>fare_class</th>\n","      <th>pickup_longitude</th>\n","      <th>pickup_latitude</th>\n","      <th>dropoff_longitude</th>\n","      <th>dropoff_latitude</th>\n","      <th>passenger_count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2010-04-19 08:17:56 UTC</td>\n","      <td>6.5</td>\n","      <td>0</td>\n","      <td>-73.992365</td>\n","      <td>40.730521</td>\n","      <td>-73.975499</td>\n","      <td>40.744746</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2010-04-17 15:43:53 UTC</td>\n","      <td>6.9</td>\n","      <td>0</td>\n","      <td>-73.990078</td>\n","      <td>40.740558</td>\n","      <td>-73.974232</td>\n","      <td>40.744114</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2010-04-17 11:23:26 UTC</td>\n","      <td>10.1</td>\n","      <td>1</td>\n","      <td>-73.994149</td>\n","      <td>40.751118</td>\n","      <td>-73.960064</td>\n","      <td>40.766235</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2010-04-11 21:25:03 UTC</td>\n","      <td>8.9</td>\n","      <td>0</td>\n","      <td>-73.990485</td>\n","      <td>40.756422</td>\n","      <td>-73.971205</td>\n","      <td>40.748192</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2010-04-17 02:19:01 UTC</td>\n","      <td>19.7</td>\n","      <td>1</td>\n","      <td>-73.990976</td>\n","      <td>40.734202</td>\n","      <td>-73.905956</td>\n","      <td>40.743115</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           pickup_datetime  fare_amount  ...  dropoff_latitude  passenger_count\n","0  2010-04-19 08:17:56 UTC          6.5  ...         40.744746                1\n","1  2010-04-17 15:43:53 UTC          6.9  ...         40.744114                1\n","2  2010-04-17 11:23:26 UTC         10.1  ...         40.766235                2\n","3  2010-04-11 21:25:03 UTC          8.9  ...         40.748192                1\n","4  2010-04-17 02:19:01 UTC         19.7  ...         40.743115                1\n","\n","[5 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":288},"id":"BclESXVTPKrO","executionInfo":{"status":"ok","timestamp":1623390921213,"user_tz":300,"elapsed":9,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"a13c1935-75bd-4e55-b8d1-2c57fad18482"},"source":["df_test.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>pickup_datetime</th>\n","      <th>pickup_longitude</th>\n","      <th>pickup_latitude</th>\n","      <th>dropoff_longitude</th>\n","      <th>dropoff_latitude</th>\n","      <th>passenger_count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2015-01-27 13:08:24.0000002</td>\n","      <td>2015-01-27 13:08:24 UTC</td>\n","      <td>-73.973320</td>\n","      <td>40.763805</td>\n","      <td>-73.981430</td>\n","      <td>40.743835</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2015-01-27 13:08:24.0000003</td>\n","      <td>2015-01-27 13:08:24 UTC</td>\n","      <td>-73.986862</td>\n","      <td>40.719383</td>\n","      <td>-73.998886</td>\n","      <td>40.739201</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2011-10-08 11:53:44.0000002</td>\n","      <td>2011-10-08 11:53:44 UTC</td>\n","      <td>-73.982524</td>\n","      <td>40.751260</td>\n","      <td>-73.979654</td>\n","      <td>40.746139</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2012-12-01 21:12:12.0000002</td>\n","      <td>2012-12-01 21:12:12 UTC</td>\n","      <td>-73.981160</td>\n","      <td>40.767807</td>\n","      <td>-73.990448</td>\n","      <td>40.751635</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2012-12-01 21:12:12.0000003</td>\n","      <td>2012-12-01 21:12:12 UTC</td>\n","      <td>-73.966046</td>\n","      <td>40.789775</td>\n","      <td>-73.988565</td>\n","      <td>40.744427</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                           key  ... passenger_count\n","0  2015-01-27 13:08:24.0000002  ...               1\n","1  2015-01-27 13:08:24.0000003  ...               1\n","2  2011-10-08 11:53:44.0000002  ...               1\n","3  2012-12-01 21:12:12.0000002  ...               1\n","4  2012-12-01 21:12:12.0000003  ...               1\n","\n","[5 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"id":"FoCVtfpXPKrP"},"source":["## Performing feature engineering"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"P_MnYeQAPKrP"},"source":["import datetime "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aZQyoONFPKrP"},"source":["df_train['pickup_datetime']=pd.to_datetime(df_train['pickup_datetime'])\n","df_test['pickup_datetime']=pd.to_datetime(df_test['pickup_datetime'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S_KjxSJSPKrP","executionInfo":{"status":"ok","timestamp":1623390937927,"user_tz":300,"elapsed":7,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"c4a0d965-cc53-4517-fb39-dad3ca79be05"},"source":["df_train['pickup_datetime']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0        2010-04-19 08:17:56+00:00\n","1        2010-04-17 15:43:53+00:00\n","2        2010-04-17 11:23:26+00:00\n","3        2010-04-11 21:25:03+00:00\n","4        2010-04-17 02:19:01+00:00\n","                    ...           \n","119995   2010-04-18 14:33:03+00:00\n","119996   2010-04-23 10:27:48+00:00\n","119997   2010-04-18 18:50:40+00:00\n","119998   2010-04-13 08:14:44+00:00\n","119999   2010-04-17 16:00:14+00:00\n","Name: pickup_datetime, Length: 120000, dtype: datetime64[ns, UTC]"]},"metadata":{"tags":[]},"execution_count":47}]},{"cell_type":"code","metadata":{"id":"fWZFV4PPPKrQ"},"source":["##substracting the 4 hours to convert to newyork time\n","df_train['pickup_datetime']=pd.to_datetime(df_train['pickup_datetime']-datetime.timedelta(hours=4))\n","df_test['pickup_datetime']=pd.to_datetime(df_test['pickup_datetime']-datetime.timedelta(hours=4))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":308},"id":"2Q07hodzPKrQ","executionInfo":{"status":"ok","timestamp":1623390938078,"user_tz":300,"elapsed":5,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"b2a6bee8-3e2e-4ea0-a390-61b2a8172994"},"source":["df_train.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pickup_datetime</th>\n","      <th>fare_amount</th>\n","      <th>fare_class</th>\n","      <th>pickup_longitude</th>\n","      <th>pickup_latitude</th>\n","      <th>dropoff_longitude</th>\n","      <th>dropoff_latitude</th>\n","      <th>passenger_count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2010-04-19 04:17:56+00:00</td>\n","      <td>6.5</td>\n","      <td>0</td>\n","      <td>-73.992365</td>\n","      <td>40.730521</td>\n","      <td>-73.975499</td>\n","      <td>40.744746</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2010-04-17 11:43:53+00:00</td>\n","      <td>6.9</td>\n","      <td>0</td>\n","      <td>-73.990078</td>\n","      <td>40.740558</td>\n","      <td>-73.974232</td>\n","      <td>40.744114</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2010-04-17 07:23:26+00:00</td>\n","      <td>10.1</td>\n","      <td>1</td>\n","      <td>-73.994149</td>\n","      <td>40.751118</td>\n","      <td>-73.960064</td>\n","      <td>40.766235</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2010-04-11 17:25:03+00:00</td>\n","      <td>8.9</td>\n","      <td>0</td>\n","      <td>-73.990485</td>\n","      <td>40.756422</td>\n","      <td>-73.971205</td>\n","      <td>40.748192</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2010-04-16 22:19:01+00:00</td>\n","      <td>19.7</td>\n","      <td>1</td>\n","      <td>-73.990976</td>\n","      <td>40.734202</td>\n","      <td>-73.905956</td>\n","      <td>40.743115</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            pickup_datetime  fare_amount  ...  dropoff_latitude  passenger_count\n","0 2010-04-19 04:17:56+00:00          6.5  ...         40.744746                1\n","1 2010-04-17 11:43:53+00:00          6.9  ...         40.744114                1\n","2 2010-04-17 07:23:26+00:00         10.1  ...         40.766235                2\n","3 2010-04-11 17:25:03+00:00          8.9  ...         40.748192                1\n","4 2010-04-16 22:19:01+00:00         19.7  ...         40.743115                1\n","\n","[5 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":49}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KUKzN7FAPKrQ","executionInfo":{"status":"ok","timestamp":1623390938259,"user_tz":300,"elapsed":185,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"dcb07e4d-10ee-4cf5-897b-da9a178edb83"},"source":["df_train['pickup_datetime'].dt.year\n","df_train['pickup_datetime'].dt.month\n","df_train['pickup_datetime'].dt.day"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0         19\n","1         17\n","2         17\n","3         11\n","4         16\n","          ..\n","119995    18\n","119996    23\n","119997    18\n","119998    13\n","119999    17\n","Name: pickup_datetime, Length: 120000, dtype: int64"]},"metadata":{"tags":[]},"execution_count":50}]},{"cell_type":"code","metadata":{"id":"SR1rkn21PKrQ"},"source":["df_train['Year']=df_train['pickup_datetime'].dt.year\n","df_train['Month']=df_train['pickup_datetime'].dt.month\n","df_train['Day']=df_train['pickup_datetime'].dt.day\n","df_train['Hour']=df_train['pickup_datetime'].dt.hour\n","df_train['Minutes']=df_train['pickup_datetime'].dt.minute"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pT7uOOuLPKrR"},"source":["df_test['Year']=df_test['pickup_datetime'].dt.year\n","df_test['Month']=df_test['pickup_datetime'].dt.month\n","df_test['Day']=df_test['pickup_datetime'].dt.day\n","df_test['Hour']=df_test['pickup_datetime'].dt.hour\n","df_test['Minutes']=df_test['pickup_datetime'].dt.minute"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jAAwBZ-qPKrR"},"source":["import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":308},"id":"pqldgfAXPKrR","executionInfo":{"status":"ok","timestamp":1623390938421,"user_tz":300,"elapsed":14,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"d28c24fa-d423-4faa-9a81-8dc663af461f"},"source":["df_train.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pickup_datetime</th>\n","      <th>fare_amount</th>\n","      <th>fare_class</th>\n","      <th>pickup_longitude</th>\n","      <th>pickup_latitude</th>\n","      <th>dropoff_longitude</th>\n","      <th>dropoff_latitude</th>\n","      <th>passenger_count</th>\n","      <th>Year</th>\n","      <th>Month</th>\n","      <th>Day</th>\n","      <th>Hour</th>\n","      <th>Minutes</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2010-04-19 04:17:56+00:00</td>\n","      <td>6.5</td>\n","      <td>0</td>\n","      <td>-73.992365</td>\n","      <td>40.730521</td>\n","      <td>-73.975499</td>\n","      <td>40.744746</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>19</td>\n","      <td>4</td>\n","      <td>17</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2010-04-17 11:43:53+00:00</td>\n","      <td>6.9</td>\n","      <td>0</td>\n","      <td>-73.990078</td>\n","      <td>40.740558</td>\n","      <td>-73.974232</td>\n","      <td>40.744114</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>11</td>\n","      <td>43</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2010-04-17 07:23:26+00:00</td>\n","      <td>10.1</td>\n","      <td>1</td>\n","      <td>-73.994149</td>\n","      <td>40.751118</td>\n","      <td>-73.960064</td>\n","      <td>40.766235</td>\n","      <td>2</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>7</td>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2010-04-11 17:25:03+00:00</td>\n","      <td>8.9</td>\n","      <td>0</td>\n","      <td>-73.990485</td>\n","      <td>40.756422</td>\n","      <td>-73.971205</td>\n","      <td>40.748192</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>11</td>\n","      <td>17</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2010-04-16 22:19:01+00:00</td>\n","      <td>19.7</td>\n","      <td>1</td>\n","      <td>-73.990976</td>\n","      <td>40.734202</td>\n","      <td>-73.905956</td>\n","      <td>40.743115</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>16</td>\n","      <td>22</td>\n","      <td>19</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            pickup_datetime  fare_amount  fare_class  ...  Day  Hour  Minutes\n","0 2010-04-19 04:17:56+00:00          6.5           0  ...   19     4       17\n","1 2010-04-17 11:43:53+00:00          6.9           0  ...   17    11       43\n","2 2010-04-17 07:23:26+00:00         10.1           1  ...   17     7       23\n","3 2010-04-11 17:25:03+00:00          8.9           0  ...   11    17       25\n","4 2010-04-16 22:19:01+00:00         19.7           1  ...   16    22       19\n","\n","[5 rows x 13 columns]"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"code","metadata":{"id":"ZyIpG9MzPKrR"},"source":["\n","##converting time to am/pm\n","df_train['am/pm']=np.where(df_train['Hour']<12,0,1)\n","df_test['am/pm']=np.where(df_test['Hour']<12,0,1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":308},"id":"kyI6xIvVPKrR","executionInfo":{"status":"ok","timestamp":1623390938424,"user_tz":300,"elapsed":15,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"85e2c76f-2d70-463a-990a-edb7e36dee21"},"source":["df_train.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pickup_datetime</th>\n","      <th>fare_amount</th>\n","      <th>fare_class</th>\n","      <th>pickup_longitude</th>\n","      <th>pickup_latitude</th>\n","      <th>dropoff_longitude</th>\n","      <th>dropoff_latitude</th>\n","      <th>passenger_count</th>\n","      <th>Year</th>\n","      <th>Month</th>\n","      <th>Day</th>\n","      <th>Hour</th>\n","      <th>Minutes</th>\n","      <th>am/pm</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2010-04-19 04:17:56+00:00</td>\n","      <td>6.5</td>\n","      <td>0</td>\n","      <td>-73.992365</td>\n","      <td>40.730521</td>\n","      <td>-73.975499</td>\n","      <td>40.744746</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>19</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2010-04-17 11:43:53+00:00</td>\n","      <td>6.9</td>\n","      <td>0</td>\n","      <td>-73.990078</td>\n","      <td>40.740558</td>\n","      <td>-73.974232</td>\n","      <td>40.744114</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>11</td>\n","      <td>43</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2010-04-17 07:23:26+00:00</td>\n","      <td>10.1</td>\n","      <td>1</td>\n","      <td>-73.994149</td>\n","      <td>40.751118</td>\n","      <td>-73.960064</td>\n","      <td>40.766235</td>\n","      <td>2</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>7</td>\n","      <td>23</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2010-04-11 17:25:03+00:00</td>\n","      <td>8.9</td>\n","      <td>0</td>\n","      <td>-73.990485</td>\n","      <td>40.756422</td>\n","      <td>-73.971205</td>\n","      <td>40.748192</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>11</td>\n","      <td>17</td>\n","      <td>25</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2010-04-16 22:19:01+00:00</td>\n","      <td>19.7</td>\n","      <td>1</td>\n","      <td>-73.990976</td>\n","      <td>40.734202</td>\n","      <td>-73.905956</td>\n","      <td>40.743115</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>16</td>\n","      <td>22</td>\n","      <td>19</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            pickup_datetime  fare_amount  fare_class  ...  Hour  Minutes  am/pm\n","0 2010-04-19 04:17:56+00:00          6.5           0  ...     4       17      0\n","1 2010-04-17 11:43:53+00:00          6.9           0  ...    11       43      0\n","2 2010-04-17 07:23:26+00:00         10.1           1  ...     7       23      0\n","3 2010-04-11 17:25:03+00:00          8.9           0  ...    17       25      1\n","4 2010-04-16 22:19:01+00:00         19.7           1  ...    22       19      1\n","\n","[5 rows x 14 columns]"]},"metadata":{"tags":[]},"execution_count":56}]},{"cell_type":"code","metadata":{"id":"IvNZSiwCPKrS"},"source":["df_train.drop('pickup_datetime',1,inplace=True)\n","df_test.drop('pickup_datetime',1,inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"id":"hNbN_ZkwPKrS","executionInfo":{"status":"ok","timestamp":1623390938521,"user_tz":300,"elapsed":111,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"5b45d389-cc6c-48c7-834e-c34292658517"},"source":["df_train.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fare_amount</th>\n","      <th>fare_class</th>\n","      <th>pickup_longitude</th>\n","      <th>pickup_latitude</th>\n","      <th>dropoff_longitude</th>\n","      <th>dropoff_latitude</th>\n","      <th>passenger_count</th>\n","      <th>Year</th>\n","      <th>Month</th>\n","      <th>Day</th>\n","      <th>Hour</th>\n","      <th>Minutes</th>\n","      <th>am/pm</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6.5</td>\n","      <td>0</td>\n","      <td>-73.992365</td>\n","      <td>40.730521</td>\n","      <td>-73.975499</td>\n","      <td>40.744746</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>19</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6.9</td>\n","      <td>0</td>\n","      <td>-73.990078</td>\n","      <td>40.740558</td>\n","      <td>-73.974232</td>\n","      <td>40.744114</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>11</td>\n","      <td>43</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10.1</td>\n","      <td>1</td>\n","      <td>-73.994149</td>\n","      <td>40.751118</td>\n","      <td>-73.960064</td>\n","      <td>40.766235</td>\n","      <td>2</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>7</td>\n","      <td>23</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8.9</td>\n","      <td>0</td>\n","      <td>-73.990485</td>\n","      <td>40.756422</td>\n","      <td>-73.971205</td>\n","      <td>40.748192</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>11</td>\n","      <td>17</td>\n","      <td>25</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>19.7</td>\n","      <td>1</td>\n","      <td>-73.990976</td>\n","      <td>40.734202</td>\n","      <td>-73.905956</td>\n","      <td>40.743115</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>16</td>\n","      <td>22</td>\n","      <td>19</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   fare_amount  fare_class  pickup_longitude  ...  Hour  Minutes  am/pm\n","0          6.5           0        -73.992365  ...     4       17      0\n","1          6.9           0        -73.990078  ...    11       43      0\n","2         10.1           1        -73.994149  ...     7       23      0\n","3          8.9           0        -73.990485  ...    17       25      1\n","4         19.7           1        -73.990976  ...    22       19      1\n","\n","[5 rows x 13 columns]"]},"metadata":{"tags":[]},"execution_count":58}]},{"cell_type":"code","metadata":{"id":"FK5eoplkPKrS"},"source":["from sklearn.metrics.pairwise import haversine_distances\n","from math import radians\n","# bsas = [-34.83333, -58.5166646]\n","# >>> paris = [49.0083899664, 2.53844117956]\n","# >>> bsas_in_radians = [radians(_) for _ in bsas]\n","# >>> paris_in_radians = [radians(_) for _ in paris]\n","# >>> result = haversine_distances([bsas_in_radians, paris_in_radians])\n","# >>> result * 6371000/1000  # multiply by Earth radius to get kilometers\n","# array([[    0.        , 11099.54035582],\n","#        [11099.54035582,     0.        ]])\n","# def haversine(df)\n","# df['pickup']=df['pickup_longitude']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"i5a96DcQPKrS"},"source":["def haversine(df):\n","    ##Calculate the great circle distance between two points on the earth (specified in decimal degrees)\n","    \n","    lat1= np.radians(df[\"pickup_latitude\"])\n","    lat2 = np.radians(df[\"dropoff_latitude\"])\n","    #### Based on the formula  x1=drop_lat,x2=dropoff_long \n","    dlat = np.radians(df['dropoff_latitude']-df[\"pickup_latitude\"])\n","    dlong = np.radians(df[\"dropoff_longitude\"]-df[\"pickup_longitude\"])\n","    a = np.sin(dlat/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlong/2)**2\n","\n","    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n","    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n","    return c * r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bm7fKk20PKrS"},"source":["df_train['Distance']= haversine(df_train)\n","df_test['Distance']=haversine(df_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"id":"76FVMjXjPKrS","executionInfo":{"status":"ok","timestamp":1623390938654,"user_tz":300,"elapsed":10,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"edb7fe04-ed0b-4542-a439-c08162b1afe2"},"source":["df_train.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fare_amount</th>\n","      <th>fare_class</th>\n","      <th>pickup_longitude</th>\n","      <th>pickup_latitude</th>\n","      <th>dropoff_longitude</th>\n","      <th>dropoff_latitude</th>\n","      <th>passenger_count</th>\n","      <th>Year</th>\n","      <th>Month</th>\n","      <th>Day</th>\n","      <th>Hour</th>\n","      <th>Minutes</th>\n","      <th>am/pm</th>\n","      <th>Distance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6.5</td>\n","      <td>0</td>\n","      <td>-73.992365</td>\n","      <td>40.730521</td>\n","      <td>-73.975499</td>\n","      <td>40.744746</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>19</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>0</td>\n","      <td>2.126312</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6.9</td>\n","      <td>0</td>\n","      <td>-73.990078</td>\n","      <td>40.740558</td>\n","      <td>-73.974232</td>\n","      <td>40.744114</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>11</td>\n","      <td>43</td>\n","      <td>0</td>\n","      <td>1.392307</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10.1</td>\n","      <td>1</td>\n","      <td>-73.994149</td>\n","      <td>40.751118</td>\n","      <td>-73.960064</td>\n","      <td>40.766235</td>\n","      <td>2</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>7</td>\n","      <td>23</td>\n","      <td>0</td>\n","      <td>3.326763</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8.9</td>\n","      <td>0</td>\n","      <td>-73.990485</td>\n","      <td>40.756422</td>\n","      <td>-73.971205</td>\n","      <td>40.748192</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>11</td>\n","      <td>17</td>\n","      <td>25</td>\n","      <td>1</td>\n","      <td>1.864129</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>19.7</td>\n","      <td>1</td>\n","      <td>-73.990976</td>\n","      <td>40.734202</td>\n","      <td>-73.905956</td>\n","      <td>40.743115</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>16</td>\n","      <td>22</td>\n","      <td>19</td>\n","      <td>1</td>\n","      <td>7.231321</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   fare_amount  fare_class  pickup_longitude  ...  Minutes  am/pm  Distance\n","0          6.5           0        -73.992365  ...       17      0  2.126312\n","1          6.9           0        -73.990078  ...       43      0  1.392307\n","2         10.1           1        -73.994149  ...       23      0  3.326763\n","3          8.9           0        -73.990485  ...       25      1  1.864129\n","4         19.7           1        -73.990976  ...       19      1  7.231321\n","\n","[5 rows x 14 columns]"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"code","metadata":{"id":"7yo_-tP0PKrT"},"source":["df_train=df_train.drop(['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude'],1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d75U0S-aPKrT"},"source":["df_test=df_test.drop(['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','key'],1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":203},"id":"Pry_echyPKrT","executionInfo":{"status":"ok","timestamp":1623390938762,"user_tz":300,"elapsed":115,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"af90699a-96c7-4a1a-efdf-4a362ed98e7f"},"source":["df_train.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fare_amount</th>\n","      <th>fare_class</th>\n","      <th>passenger_count</th>\n","      <th>Year</th>\n","      <th>Month</th>\n","      <th>Day</th>\n","      <th>Hour</th>\n","      <th>Minutes</th>\n","      <th>am/pm</th>\n","      <th>Distance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6.5</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>19</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>0</td>\n","      <td>2.126312</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6.9</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>11</td>\n","      <td>43</td>\n","      <td>0</td>\n","      <td>1.392307</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10.1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>7</td>\n","      <td>23</td>\n","      <td>0</td>\n","      <td>3.326763</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8.9</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>11</td>\n","      <td>17</td>\n","      <td>25</td>\n","      <td>1</td>\n","      <td>1.864129</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>19.7</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>16</td>\n","      <td>22</td>\n","      <td>19</td>\n","      <td>1</td>\n","      <td>7.231321</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   fare_amount  fare_class  passenger_count  ...  Minutes  am/pm  Distance\n","0          6.5           0                1  ...       17      0  2.126312\n","1          6.9           0                1  ...       43      0  1.392307\n","2         10.1           1                2  ...       23      0  3.326763\n","3          8.9           0                1  ...       25      1  1.864129\n","4         19.7           1                1  ...       19      1  7.231321\n","\n","[5 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":65}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":203},"id":"EASU-DxGPKrT","executionInfo":{"status":"ok","timestamp":1623390938763,"user_tz":300,"elapsed":11,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"dd22ba50-f823-42c7-81eb-1c2de998a47c"},"source":["df_test.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>passenger_count</th>\n","      <th>Year</th>\n","      <th>Month</th>\n","      <th>Day</th>\n","      <th>Hour</th>\n","      <th>Minutes</th>\n","      <th>am/pm</th>\n","      <th>Distance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>2015</td>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>9</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>2.323260</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2015</td>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>9</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>2.425353</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>2011</td>\n","      <td>10</td>\n","      <td>8</td>\n","      <td>7</td>\n","      <td>53</td>\n","      <td>0</td>\n","      <td>0.618628</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>2012</td>\n","      <td>12</td>\n","      <td>1</td>\n","      <td>17</td>\n","      <td>12</td>\n","      <td>1</td>\n","      <td>1.961033</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>2012</td>\n","      <td>12</td>\n","      <td>1</td>\n","      <td>17</td>\n","      <td>12</td>\n","      <td>1</td>\n","      <td>5.387301</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   passenger_count  Year  Month  Day  Hour  Minutes  am/pm  Distance\n","0                1  2015      1   27     9        8      0  2.323260\n","1                1  2015      1   27     9        8      0  2.425353\n","2                1  2011     10    8     7       53      0  0.618628\n","3                1  2012     12    1    17       12      1  1.961033\n","4                1  2012     12    1    17       12      1  5.387301"]},"metadata":{"tags":[]},"execution_count":66}]},{"cell_type":"markdown","metadata":{"id":"zX3F9LA7PKrT"},"source":["### Storing Data in MongoDb"]},{"cell_type":"code","metadata":{"id":"DAI9dGXRPKrT"},"source":["import json\n","records=json.loads(df_train.T.to_json()).values()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qjAoDjMbPKrU","executionInfo":{"status":"ok","timestamp":1623390944008,"user_tz":300,"elapsed":4085,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"dd5b94fd-183f-4e75-cc26-36aebd8ba17e"},"source":["!pip install pymongo"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: pymongo in /usr/local/lib/python3.7/dist-packages (3.11.4)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_ICGb38bPKrU"},"source":["import pymongo\n","client=pymongo.MongoClient('mongodb://127.0.0.1:27017/')\n","db=client[\"NewyorkTaxi\"] ####Data base name\n","col=db['rides']  ##Collection\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","output_embedded_package_id":"1iv5rK1T07E23cGBNHTVPKlAol6eKF601"},"id":"0dsak332PKrU","executionInfo":{"status":"ok","timestamp":1623390952301,"user_tz":300,"elapsed":7642,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"7b8c5878-80ce-4c73-f378-3ae37e7dcd5b"},"source":["records"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":350},"id":"ICBidl7qPKrU","executionInfo":{"status":"error","timestamp":1623390977805,"user_tz":300,"elapsed":25515,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"e4bd4473-52c2-449a-9c6a-262d6c8f455a"},"source":["col.insert_many(records)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ServerSelectionTimeoutError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mServerSelectionTimeoutError\u001b[0m               Traceback (most recent call last)","\u001b[0;32m<ipython-input-71-01848ba39231>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcol\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert_many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecords\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pymongo/collection.py\u001b[0m in \u001b[0;36minsert_many\u001b[0;34m(self, documents, ordered, bypass_document_validation, session)\u001b[0m\n\u001b[1;32m    759\u001b[0m         \u001b[0mblk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_Bulk\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mordered\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbypass_document_validation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    760\u001b[0m         \u001b[0mblk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mops\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mdoc\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mdoc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 761\u001b[0;31m         \u001b[0mblk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwrite_concern\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    762\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mInsertManyResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minserted_ids\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwrite_concern\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macknowledged\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    763\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pymongo/bulk.py\u001b[0m in \u001b[0;36mexecute\u001b[0;34m(self, write_concern, session)\u001b[0m\n\u001b[1;32m    526\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute_no_results\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msock_info\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgenerator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    527\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 528\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwrite_concern\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    529\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    530\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pymongo/bulk.py\u001b[0m in \u001b[0;36mexecute_command\u001b[0;34m(self, generator, write_concern, session)\u001b[0m\n\u001b[1;32m    356\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    357\u001b[0m         \u001b[0mclient\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcollection\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatabase\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 358\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tmp_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    359\u001b[0m             client._retry_with_session(\n\u001b[1;32m    360\u001b[0m                 self.is_retryable, retryable_bulk, s, self)\n","\u001b[0;32m/usr/lib/python3.7/contextlib.py\u001b[0m in \u001b[0;36m__enter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    110\u001b[0m         \u001b[0;32mdel\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    111\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 112\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    113\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    114\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"generator didn't yield\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pymongo/mongo_client.py\u001b[0m in \u001b[0;36m_tmp_session\u001b[0;34m(self, session, close)\u001b[0m\n\u001b[1;32m   1827\u001b[0m             \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1828\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1829\u001b[0;31m         \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_ensure_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1830\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1831\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pymongo/mongo_client.py\u001b[0m in \u001b[0;36m_ensure_session\u001b[0;34m(self, session)\u001b[0m\n\u001b[1;32m   1814\u001b[0m             \u001b[0;31m# Don't make implicit sessions causally consistent. Applications\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1815\u001b[0m             \u001b[0;31m# should always opt-in.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1816\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__start_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcausal_consistency\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1817\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mConfigurationError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mInvalidOperation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1818\u001b[0m             \u001b[0;31m# Sessions not supported, or multiple users authenticated.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pymongo/mongo_client.py\u001b[0m in \u001b[0;36m__start_session\u001b[0;34m(self, implicit, **kwargs)\u001b[0m\n\u001b[1;32m   1764\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1765\u001b[0m         \u001b[0;31m# Raises ConfigurationError if sessions are not supported.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1766\u001b[0;31m         \u001b[0mserver_session\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_server_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1767\u001b[0m         \u001b[0mopts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclient_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSessionOptions\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1768\u001b[0m         return client_session.ClientSession(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pymongo/mongo_client.py\u001b[0m in \u001b[0;36m_get_server_session\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1800\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_server_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1801\u001b[0m         \u001b[0;34m\"\"\"Internal: start or resume a _ServerSession.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1802\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_topology\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_server_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1803\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1804\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_return_server_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mserver_session\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlock\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pymongo/topology.py\u001b[0m in \u001b[0;36mget_server_session\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    497\u001b[0m                             \u001b[0many_server_selector\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    498\u001b[0m                             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_settings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mserver_selection_timeout\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 499\u001b[0;31m                             None)\n\u001b[0m\u001b[1;32m    500\u001b[0m                 \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_description\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadable_servers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    501\u001b[0m                     self._select_servers_loop(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pymongo/topology.py\u001b[0m in \u001b[0;36m_select_servers_loop\u001b[0;34m(self, selector, timeout, address)\u001b[0m\n\u001b[1;32m    215\u001b[0m                 raise ServerSelectionTimeoutError(\n\u001b[1;32m    216\u001b[0m                     \u001b[0;34m\"%s, Timeout: %ss, Topology Description: %r\"\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m                     (self._error_message(selector), timeout, self.description))\n\u001b[0m\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_ensure_opened\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mServerSelectionTimeoutError\u001b[0m: 127.0.0.1:27017: [Errno 111] Connection refused, Timeout: 30s, Topology Description: <TopologyDescription id: 60c2fae0dc7c9231df84d78b, topology_type: Single, servers: [<ServerDescription ('127.0.0.1', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('127.0.0.1:27017: [Errno 111] Connection refused')>]>"]}]},{"cell_type":"code","metadata":{"id":"x0tRbEU7PKrU"},"source":["corrmatt=df_train.corr()\n","corrmatt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xowAmtc3PKrV"},"source":["df_train"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":417},"id":"hga5c-VUPKrV","executionInfo":{"status":"ok","timestamp":1623391027175,"user_tz":300,"elapsed":104,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"c1ff2c69-2bbb-4e5f-aef1-17ed32d536cf"},"source":["X=df_train.iloc[:,1:]\n","X"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fare_class</th>\n","      <th>passenger_count</th>\n","      <th>Year</th>\n","      <th>Month</th>\n","      <th>Day</th>\n","      <th>Hour</th>\n","      <th>Minutes</th>\n","      <th>am/pm</th>\n","      <th>Distance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>19</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>0</td>\n","      <td>2.126312</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>11</td>\n","      <td>43</td>\n","      <td>0</td>\n","      <td>1.392307</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>7</td>\n","      <td>23</td>\n","      <td>0</td>\n","      <td>3.326763</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>11</td>\n","      <td>17</td>\n","      <td>25</td>\n","      <td>1</td>\n","      <td>1.864129</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>16</td>\n","      <td>22</td>\n","      <td>19</td>\n","      <td>1</td>\n","      <td>7.231321</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>119995</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>18</td>\n","      <td>10</td>\n","      <td>33</td>\n","      <td>0</td>\n","      <td>5.751348</td>\n","    </tr>\n","    <tr>\n","      <th>119996</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>23</td>\n","      <td>6</td>\n","      <td>27</td>\n","      <td>0</td>\n","      <td>5.767444</td>\n","    </tr>\n","    <tr>\n","      <th>119997</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>18</td>\n","      <td>14</td>\n","      <td>50</td>\n","      <td>1</td>\n","      <td>5.052523</td>\n","    </tr>\n","    <tr>\n","      <th>119998</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>13</td>\n","      <td>4</td>\n","      <td>14</td>\n","      <td>0</td>\n","      <td>1.208923</td>\n","    </tr>\n","    <tr>\n","      <th>119999</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>17</td>\n","      <td>12</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1.427399</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>120000 rows × 9 columns</p>\n","</div>"],"text/plain":["        fare_class  passenger_count  Year  ...  Minutes  am/pm  Distance\n","0                0                1  2010  ...       17      0  2.126312\n","1                0                1  2010  ...       43      0  1.392307\n","2                1                2  2010  ...       23      0  3.326763\n","3                0                1  2010  ...       25      1  1.864129\n","4                1                1  2010  ...       19      1  7.231321\n","...            ...              ...   ...  ...      ...    ...       ...\n","119995           1                1  2010  ...       33      0  5.751348\n","119996           1                1  2010  ...       27      0  5.767444\n","119997           1                3  2010  ...       50      1  5.052523\n","119998           0                1  2010  ...       14      0  1.208923\n","119999           0                3  2010  ...        0      1  1.427399\n","\n","[120000 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":72}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-j9BJABdPKrW","executionInfo":{"status":"ok","timestamp":1623391030211,"user_tz":300,"elapsed":118,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"820e4427-059c-4104-b04f-c8e6d77622eb"},"source":["y=df_train.iloc[:,0]\n","y"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0          6.5\n","1          6.9\n","2         10.1\n","3          8.9\n","4         19.7\n","          ... \n","119995    15.3\n","119996    15.3\n","119997    12.5\n","119998     4.9\n","119999     5.3\n","Name: fare_amount, Length: 120000, dtype: float64"]},"metadata":{"tags":[]},"execution_count":73}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G8pw75ATPKrW","executionInfo":{"status":"ok","timestamp":1623391060788,"user_tz":300,"elapsed":29452,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"10085600-0a0c-48c3-f1a3-9c7d94652249"},"source":["from sklearn.ensemble import ExtraTreesRegressor\n","model=ExtraTreesRegressor()\n","model.fit(X,y)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',\n","                    max_depth=None, max_features='auto', max_leaf_nodes=None,\n","                    max_samples=None, min_impurity_decrease=0.0,\n","                    min_impurity_split=None, min_samples_leaf=1,\n","                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n","                    n_estimators=100, n_jobs=None, oob_score=False,\n","                    random_state=None, verbose=0, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":74}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nBNJbEhjPKrX","executionInfo":{"status":"ok","timestamp":1623391061219,"user_tz":300,"elapsed":435,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"787e5201-6cee-459c-9c45-5ffc997f2c8e"},"source":["model.feature_importances_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.40502415, 0.00799329, 0.        , 0.        , 0.02256393,\n","       0.02455996, 0.03247152, 0.0032202 , 0.50416696])"]},"metadata":{"tags":[]},"execution_count":75}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"ePEyGLffPKrX","executionInfo":{"status":"ok","timestamp":1623391061939,"user_tz":300,"elapsed":723,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"640739a8-e750-416a-c3dd-c7a026a25919"},"source":["feature_imp=pd.Series(model.feature_importances_,index=X.columns)\n","feature_imp.nlargest(10).plot(kind='barh')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fef39a5e110>"]},"metadata":{"tags":[]},"execution_count":76},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":386},"id":"u315ENJYPKrX","executionInfo":{"status":"ok","timestamp":1623391062912,"user_tz":300,"elapsed":977,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"34db6eb1-99ce-4180-eb8a-7859875f63a7"},"source":["import seaborn as sns\n","sns.displot(y)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7fef38715090>"]},"metadata":{"tags":[]},"execution_count":77},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 360x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ih9b5TMAPKrX"},"source":["## Using Random Forest Regressor"]},{"cell_type":"code","metadata":{"id":"htDkM2QXPKrX"},"source":["from sklearn.model_selection import train_test_split"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-qNT7ENfPKrX"},"source":["X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.20)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LkllER_TPKrY"},"source":["from sklearn.ensemble import RandomForestRegressor\n","rfr=RandomForestRegressor()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xBL0ohy_PKrY","executionInfo":{"status":"ok","timestamp":1623391115501,"user_tz":300,"elapsed":52593,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"0bc15890-246a-4484-ab95-7abe7da15c2b"},"source":["rfr.fit(X,y)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',\n","                      max_depth=None, max_features='auto', max_leaf_nodes=None,\n","                      max_samples=None, min_impurity_decrease=0.0,\n","                      min_impurity_split=None, min_samples_leaf=1,\n","                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n","                      n_estimators=100, n_jobs=None, oob_score=False,\n","                      random_state=None, verbose=0, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":81}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5la5YRDnPKrY","executionInfo":{"status":"ok","timestamp":1623391120440,"user_tz":300,"elapsed":4951,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"3b950d11-dfbf-4dc0-b499-5883ecc4d704"},"source":["rfr.score(X_train,y_train)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9821086907654251"]},"metadata":{"tags":[]},"execution_count":82}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Gg5C2YpHPKrY","executionInfo":{"status":"ok","timestamp":1623391121879,"user_tz":300,"elapsed":1468,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"26dd12b5-7889-4b65-f51b-2fb8b19b6890"},"source":["\n","rfr.score(X_test,y_test)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9825425214804565"]},"metadata":{"tags":[]},"execution_count":83}]},{"cell_type":"code","metadata":{"id":"74oEZZWkPKrY"},"source":["from sklearn.model_selection import cross_val_score\n","score=cross_val_score(rfr,X,y,cv=5)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ALVhE3HJPKrY","executionInfo":{"status":"ok","timestamp":1623391323260,"user_tz":300,"elapsed":29,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"2c0fe5bb-0a66-4fbe-b187-b43021811e04"},"source":["score.mean()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8715698243690495"]},"metadata":{"tags":[]},"execution_count":85}]},{"cell_type":"markdown","metadata":{"id":"67dcu-riPKrZ"},"source":["### Model Evaluation"]},{"cell_type":"code","metadata":{"id":"SxBvz6EsPKrZ"},"source":["#prediction =rfr.predict(X_test)\n","prediction =rfr.predict(X_test)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":370},"id":"slJnCI8_PKrZ","executionInfo":{"status":"ok","timestamp":1623391325113,"user_tz":300,"elapsed":486,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"8717a078-4793-4ca8-bf14-4bd045587732"},"source":["#sns.distplot(prediction-y_test)\n","sns.distplot(y_test-prediction)\n","\n","print(y_test.shape)\n","print(prediction.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n","  warnings.warn(msg, FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["(24000,)\n","(24000,)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"bYkV7mqJPKrZ","executionInfo":{"status":"ok","timestamp":1623391325499,"user_tz":300,"elapsed":400,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"20d799d6-b6a8-4d9c-8d26-9951877e0ae4"},"source":["\n","import matplotlib.pyplot as plt\n","\n","plt.scatter(y_test,prediction)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7fef3674e3d0>"]},"metadata":{"tags":[]},"execution_count":88},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"luqchrwTPKrZ"},"source":["### Hyper parameter Tuning  using RandomSearchCV\n","from sklearn.model_selection import RandomizedSearchCV"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"n5lhzSLYPKrZ"},"source":["rf=RandomForestRegressor()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zTzj8kh8PKra"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pA8VBGurPKra"},"source":["#Randomized Search CV\n","\n","# Number of trees in random forest\n","n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1000, num = 5)]\n","# Number of features to consider at every split\n","max_features = ['auto', 'sqrt']\n","# Maximum number of levels in tree\n","max_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n","# max_depth.append(None)\n","# Minimum number of samples required to split a node\n","min_samples_split = [2, 5, 10, 15, 100]\n","# Minimum number of samples required at each leaf node\n","min_samples_leaf = [1, 2, 5, 10]\n","# Method of selecting samples for training each tree\n","#bootstrap = [True, False]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3eCnHQRTPKra"},"source":["random_grid     = {'n_estimators': n_estimators,\n","               'max_features':max_features,\n","               'max_depth': max_depth,\n","               'min_samples_split': min_samples_split,\n","               'min_samples_leaf': min_samples_leaf\n","                  }"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lRpBMbeCPKra"},"source":["r_forest=RandomizedSearchCV(rf,random_grid,n_iter=5,cv=5,random_state=50,n_jobs=-1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W7qRLNebPKra","executionInfo":{"status":"ok","timestamp":1623392538104,"user_tz":300,"elapsed":1212432,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"1b13a40f-64f7-42fc-f58a-db07ef72f298"},"source":["r_forest.fit(X_train,y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/joblib/externals/loky/process_executor.py:691: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=5, error_score=nan,\n","                   estimator=RandomForestRegressor(bootstrap=True,\n","                                                   ccp_alpha=0.0,\n","                                                   criterion='mse',\n","                                                   max_depth=None,\n","                                                   max_features='auto',\n","                                                   max_leaf_nodes=None,\n","                                                   max_samples=None,\n","                                                   min_impurity_decrease=0.0,\n","                                                   min_impurity_split=None,\n","                                                   min_samples_leaf=1,\n","                                                   min_samples_split=2,\n","                                                   min_weight_fraction_leaf=0.0,\n","                                                   n_estimators=100,\n","                                                   n_jobs=None, oob_score=False,\n","                                                   random_state=None, verbose=0,\n","                                                   warm_start=False),\n","                   iid='deprecated', n_iter=5, n_jobs=-1,\n","                   param_distributions={'max_depth': [5, 10, 15, 20, 25, 30],\n","                                        'max_features': ['auto', 'sqrt'],\n","                                        'min_samples_leaf': [1, 2, 5, 10],\n","                                        'min_samples_split': [2, 5, 10, 15,\n","                                                              100],\n","                                        'n_estimators': [100, 325, 550, 775,\n","                                                         1000]},\n","                   pre_dispatch='2*n_jobs', random_state=50, refit=True,\n","                   return_train_score=False, scoring=None, verbose=0)"]},"metadata":{"tags":[]},"execution_count":94}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x2X57HSmPKra","executionInfo":{"status":"ok","timestamp":1623392538105,"user_tz":300,"elapsed":36,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"d24af113-a124-4f5d-e6e0-6554b787ef61"},"source":["r_forest.best_params_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'max_depth': 10,\n"," 'max_features': 'auto',\n"," 'min_samples_leaf': 2,\n"," 'min_samples_split': 2,\n"," 'n_estimators': 1000}"]},"metadata":{"tags":[]},"execution_count":95}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xh_RjZW2PKra","executionInfo":{"status":"ok","timestamp":1623393012593,"user_tz":300,"elapsed":137,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"c039572e-c724-4aec-92a5-1d6518d02e19"},"source":["r_forest.best_score_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8813848133899761"]},"metadata":{"tags":[]},"execution_count":96}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":353},"id":"HFxc6XZBPKrb","executionInfo":{"status":"ok","timestamp":1623393054070,"user_tz":300,"elapsed":3004,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"0cbf8bfb-0376-41bb-b733-ef18ffa394bb"},"source":["predictions=r_forest.predict(X_test)\n","sns.distplot(y_test-predictions)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n","  warnings.warn(msg, FutureWarning)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fef370dcd50>"]},"metadata":{"tags":[]},"execution_count":97},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"bmCgrj63PKrb","executionInfo":{"status":"ok","timestamp":1623393085734,"user_tz":300,"elapsed":415,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"f4a5a991-6889-4e66-dc52-6ed2dc9a016d"},"source":["plt.scatter(y_test,prediction)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7fef3af4e610>"]},"metadata":{"tags":[]},"execution_count":98},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_x3WIwNSxKbV","executionInfo":{"status":"ok","timestamp":1623393121883,"user_tz":300,"elapsed":120,"user":{"displayName":"Rishabh Gupta","photoUrl":"","userId":"07837752302026804751"}},"outputId":"d5013ef2-819e-4894-c6fc-be8e1d6e9cdc"},"source":["from sklearn import metrics\n","\n","print('MAE:', metrics.mean_absolute_error(y_test, prediction))\n","print('MSE:', metrics.mean_squared_error(y_test, prediction))\n","print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, prediction)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["MAE: 0.5410336916666667\n","MSE: 0.9681296047966664\n","RMSE: 0.9839357726989432\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nqBdtG0DxTUt"},"source":[""],"execution_count":null,"outputs":[]}]}